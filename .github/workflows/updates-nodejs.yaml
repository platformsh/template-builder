---
########################################################################################################
# Template-builder scheduled updates/rebuilds.
########################################################################################################
# Name and scheduling.
name: "Node.js scheduled updates"
on:
    push:
        branches: 'cleanup'
########################################################################################################
# Variables
env:
    TB_POETRY_VERSION: "1.1.11"
    TB_PYTHON_VERSION: "3.9"

    START_MESSAGE: "runtime(s): Node.js"

    UPDATES_BRANCH: "auto-updater"
    UPDATE_COMMIT_MSG: "scheduled updates."
    
    JOB_ID: "Example code scheduled updates"
    JOB_COLOR: "#145CC6"

    REPOOWNER: "platformsh"
    TEMPLATEOWNER: "platformsh-templates"

    # Git.
    GITHUB_TOKEN: ${{ secrets.DEVREL_TOKEN }}
    GIT_EMAIL: ${{ secrets.DEVREL_EMAIL }}
    GIT_USER: ${{ secrets.DEVREL_USER }}
    # Notifications.
    SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
    SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
########################################################################################################
# Job #1: Start the auto-update Slack thread.
jobs:
    create-slack-thread:
        runs-on: ubuntu-latest
        name: "Slack init"
        outputs:
            threadts: ${{ steps.startslack.outputs.threadts }}
        steps: 
            - uses: actions/checkout@v2
            - name: Setup Python
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ env.TB_PYTHON_VERSION }}
            - name: Install Poetry
              run: |
                  python -m pip install poetry==$TB_POETRY_VERSION
            - name: Configure Poetry
              run: |
                  python -m poetry config virtualenvs.in-project true
            - name: Cache the virtualenv
              uses: actions/cache@v2
              with:
                  path: ./.venv
                  key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
            - name: Install dependencies
              run: |
                  python -m poetry install
            - name: "Start notification on Slack"
              id: startslack
              run: |
                  RUN_URL=https://github.com/$REPOOWNER/template-builder/actions/runs/$GITHUB_RUN_ID
                  THREAD_ID=$(SLACK_BOT_TOKEN=$SLACK_TOKEN CHANNEL_ID=$SLACK_CHANNEL_ID JOB_ID="$JOB_ID" JOB_COLOR=$JOB_COLOR poetry run python utils/slack_notifier.py start $RUN_URL "$START_MESSAGE")
                  echo "::set-output name=threadts::$THREAD_ID"
########################################################################################################
# Job #2: Run the update.
    update:
        runs-on: ubuntu-latest
        needs: create-slack-thread
        name: "Update"
        # List the relevant example repos that fit this category.
        strategy:
            matrix:
                include:
                    - repo: koa
                      org: platformsh-templates
                      # TODO: There can be a default catch for this path, and maybe replace with an array for handling multi-app?
                      app-config-path: .platform.app.yaml
                    - repo: directus
                      org: platformsh-templates
                      app-config-path: .platform.app.yaml

                    # - repo: strapi
                    #   org: platformsh-templates
                    # - repo: strapi4
                    #   org: platformsh-templates
                    # - repo: express
                    #   org: platformsh-templates
                    # - repo: nextjs
                    #   org: platformsh-templates
                    # - repo: nodejs
                    #   org: platformsh-templates
                    # - repo: nuxtjs
                    #   org: platformsh-templates

                    # - repo: probot - the only demo, the rest are templates
                    #   org: platformsh-templates
        steps: 
            # 0. Install tools and dependencies for running template-builder.
            - uses: actions/checkout@v2
            - name: Setup Python to run template-builder
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8
            - name: Pre-Start e. Install Poetry
              run: |
                  python -m pip install poetry==$TB_POETRY_VERSION
            - name: Pre-Start f. Configure Poetry
              run: |
                  python -m poetry config virtualenvs.in-project true
            - name: Pre-Start g. Cache the virtualenv
              uses: actions/cache@v2
              with:
                  path: ./.venv
                  key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
            - name: Pre-Start h. Install dependencies
              run: |
                  python -m poetry install

            # 1. Dynamically set up the runtime version from the repo's application config file.
            - uses: mikefarah/yq@master
            - name: Retrieve Runtime version
              id: runtime
              run: |
                  appConfig=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/${{ matrix.org }}/${{ matrix.repo }}/contents/.platform.app.yaml)
                  echo $appConfig | jq -r '.content' | base64 --decode > app.yaml
                  runtimeVersion=$(yq '.type | split(":") | .[1]' < app.yaml)
                  echo "::set-output name=version::${runtimeVersion}"
            - name: Setup the example's runtime (nodejs)
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ steps.runtime.outputs.version }}

            # 2. Create the individual update thread. 
            - run: |
                  TEMPLATE=${{ matrix.repo }}
                  THREAD_ID=${{ needs.build.outputs.threadts }}
                  RUN_URL=https://github.com/${REPOOWNER}/template-builder/actions/runs/$GITHUB_RUN_ID

                  PR_URL="<example.com|View the pull request>"
                  MESSAGE='All good.'
                  RESULT=$(SLACK_BOT_TOKEN=$SLACK_TOKEN CHANNEL_ID=$SLACK_CHANNEL_ID THREAD_ID=$THREAD_ID poetry run python utils/slack_notifier.py up $TEMPLATE "$RUN_URL" "$PR_URL" "$MESSAGE")
                  echo $RESULT
